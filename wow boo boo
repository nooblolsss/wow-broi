local teamcheck = false
local mouse = game:GetService("Players").LocalPlayer:GetMouse()
	local Network = require(game:GetService("ReplicatedStorage").SharedModules.Global.Network)
	local UIHandler = require(game:GetService("ReplicatedStorage").Modules.UI.UIHandler)
	local SpawnUI = require(game:GetService("ReplicatedStorage").Modules.UI.SpawnUI)
	local SharedUtils = require(game:GetService("ReplicatedStorage").SharedModules.Utils.SharedUtils)
	local PlayerCharacter = require(game:GetService("ReplicatedStorage").Modules.Character.PlayerCharacter)
	local Utils = require(game:GetService("ReplicatedStorage").Modules.Utils.Utils)
	local WildLife = require(game:GetService("ReplicatedStorage").Modules.World["_WildLife"].WildLife)
	local GunItem = require(game:GetService("ReplicatedStorage").Modules.Character.Items.Types.GunItem)
	local LassoItem = require(game:GetService("ReplicatedStorage").Modules.Character.Items.Special.LassoItem)
	local InputHandler = require(game:GetService("ReplicatedStorage").Modules.System.Input.InputHandler)
	
	local Players = game:GetService('Players')
	local lplr = Players.LocalPlayer
	local Camera = workspace.CurrentCamera
	local IgnoreList = {}
	
	function SameTeam(P1, P2)
		if P1 == P2 then
			return false
		end
		pcall(function()
			if P1.TeamColor == P2.TeamColor and teamcheck then
				return true
			end
		end)
		return false
	end
	
	local function FireServer(...)
		return Network:FireServer(...)
	end
	local function IsAlive(char)
		if char and char:FindFirstChild("Head") and char.Head:FindFirstChild("PlayerInfo") then
			local health = char.Head.PlayerInfo.Screen.HealthContainer.HealthBar.HealthProgressFrame.Size.X.Scale
			if health == 0 then
				return false
			else
				return true
			end
		end
	end
	
	local function getclosestplayer()
		local closestThing = nil
		local shortestDistance = math.huge
		for i, v in pairs(game:GetService("Players"):GetPlayers()) do 
			if v ~= lplr and v.Character and v.Character:FindFirstChild("Head") and IsAlive(v.Character) then 
				local aimpart, seen = game:GetService("Workspace").CurrentCamera:WorldToScreenPoint(v.Character.Head.Position)
				if seen then
					local ignorelist = {lplr.Character}
					local castPoints = {v.Character.Head.Position}
					local hit = Camera:GetPartsObscuringTarget(castPoints, ignorelist)
					local isHit = false
					for i2,v2 in pairs(hit) do
						if not v2:IsDescendantOf(v.Character) then
							isHit = true
						end
					end
					if isHit == false then
						local magnitudee = (Vector2.new(aimpart.X, aimpart.Y) - Vector2.new(mouse.X, mouse.Y)).magnitude
						if magnitudee < shortestDistance then
							shortestDistance = magnitudee
							closestThing = v
						end
					end
				end
			end
		end
		return closestThing
	end
	
	local oldUtilsMouseHit = Utils.GetMouseHit
	Utils.GetMouseHit = function(...) 
		if SilentAim then
			local nearest = getclosestplayer()
			wait()
			if nearest and nearest.Character then
				if nearest.Character:FindFirstChild("Head") then
					return nearest.Character.Head.Position
				end
			end
		end
	
		return oldUtilsMouseHit(...)
	end
if getgenv().TSLoaded then
	local ReplicatedStorage = game:GetService("ReplicatedStorage");
	local ModLoad = require(ReplicatedStorage.Modules.Load);
	local UIHandler = ModLoad("UIHandler")
	
	return;
end

for i, v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
	v:Disable()
	game:GetService("ScriptContext").Error:Connect(function(...)
		local Arguments = {...}
		local Data, Data2 = pcall(function()
			return Arguments[3].Name
		end)
		if Data == false then
			return;
		end
		v:Fire(...)
	end)
end

--//
	local old
	old = UIHandler.SetActionBindActive
	UIHandler.SetActionBindActive = function(a,b,c)
		if tostring(b) == "Respawn" and c == true and instRespawn then
			spawn(function()
				wait(0.5)
				SpawnUI:Open(true)
			end) end end
local Core = {
    ["Weapons"] = {},
    ["Ambient"] = game:GetService("Lighting").Ambient,
    ["FireworkLaunch"] = {
        Vector3.new(1040, 171, -876),
        Vector3.new(948, 171, -966),
        Vector3.new(963, 171, -1071),
        Vector3.new(1835.715, 239.552, -1638.619),
        Vector3.new(641.765, 69.379, -809.071),
        Vector3.new(589.765, 45.379, -505.071),
        Vector3.new(366.765, 45.379, -717.071),
        Vector3.new(-308.91, 160.717, -632.784),
        Vector3.new(893, 105.541, -2316),
        Vector3.new(-781, 90.852, 502),
        Vector3.new(-235, 100.516, 565),
        Vector3.new(242.834, 176.5, 174.759),
        Vector3.new(480, 126.5, 449),
        Vector3.new(-1354, 206.338, -1529),
        Vector3.new(1695.129, 404.78, 1440.797),
        Vector3.new(519.44, 136.704, 1747.772),
        Vector3.new(-80, 122.5, 1517),
        workspace["WORKSPACE_Interactables"]["LaGrande Riverboat"].Engine.Smokestacks.smokestacktop.Position,
        Vector3.new(-1369.706, 157.491, 1957.17),
        Vector3.new(-366.106, 76.092, -1833.756),
        Vector3.new(-1896, 122.8, -430)
    }
}
local Client = {}
local Settings = {
    ESP = {},
    IESP = {}
}

local Players = game:GetService("Players")
local LocalPlayer = game:GetService("Players").LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local ModLoad = require(ReplicatedStorage.Modules.Load);
local SharedLoad = require(ReplicatedStorage.SharedModules.Load);
local WorldDisplayHandler = ModLoad("WorldDisplayHandler");
local ClientSoundHandler = ModLoad("ClientSoundHandler");
local AnimationHandler = ModLoad("AnimationHandler");
local PlayerCharacter = ModLoad("PlayerCharacter");
local ReplicatedState = ModLoad("ReplicatedState");
local QuestsSelection = ModLoad("QuestsSelection");
local FishController = ModLoad("FishController");
local BreakableGlass = ModLoad("BreakableGlass");
local RepCharHandler = ModLoad("RepCharHandler");
local ClientPlaceableFood = ModLoad("ClientPlaceableFood");
local PianoHandler = ModLoad("PianoHandler");
local InputHandler = ModLoad("InputHandler");
local ConfirmPrompt = ModLoad("ConfirmPrompt", true);
local RobuxShop = ModLoad("RobuxShop");
local GunChambers = ModLoad("GunChambers");
local Tumbleweeds = ModLoad("Tumbleweeds");
local PlaceablesHandler = ModLoad("PlaceablesHandler");
local PlayerData = ModLoad("PlayerData");
local PlaceItem = ModLoad("PlaceItem");
local UIHandler = ModLoad("UIHandler");
local FaceMouse = ModLoad("FaceMouse");
local UIObjects = ModLoad("UIObjects");
local WildLife = ModLoad("WildLife");
local Lighting = ModLoad("Lighting");
local Ragdolls = ModLoad("Ragdolls");
local BodyTilt = ModLoad("BodyTilt");
local Camera = ModLoad("Camera");
local Mining = ModLoad("Mining");
local Trains = ModLoad("Trains");
local ClientDoors = ModLoad("ClientDoors");
local BaseItem = ModLoad("BaseItem");
local Utils = ModLoad("Utils");
local Chat = ModLoad("Chat");
local Map = ModLoad("Map");
local FX = ModLoad("FX");
local Rain = ModLoad("Rain");
local Weather = ModLoad("Weather");
local AnimalRiding = ModLoad("AnimalRiding");
local Animal = ModLoad("Animal");
local SyncedTime = SharedLoad("SyncedTime");
local ProjectileHandler = SharedLoad("ProjectileHandler");
local SharedUtils = SharedLoad("SharedUtils");
local SharedData = SharedLoad("SharedData");
local Network = SharedLoad("Network");
local Mathf = SharedLoad("Mathf");
local LocalRepChar = RepCharHandler:GetRepChar(game:GetService("Players").LocalPlayer);



do

    for i,v in pairs(getconnections(game:GetService("Lighting").Changed)) do 
        v:Disable()
        game:GetService("Lighting").Changed:Connect(function()
            if game:GetService("Lighting").Ambient ~= Color3.fromRGB(255, 255, 255) and game:GetService("Lighting").Ambient ~= Core.Ambient then
                Core.Ambient = game:GetService("Lighting").Ambient
            end
        end)
    end

    for i,v in next, PlayerCharacter do
        if type(v) == "function" and getinfo(v).name ~= "" then
            Core[getinfo(v).name] = v
        end
    end

    for i, v in pairs(getgc(true)) do
        if type(v) == "table" and rawget(v, "BaseRecoil") then
            Core["Weapons"][i] = v
        end
    end

    Core["FireServer"] = Network.FireServer
   
  
    Core["AnimalRiding"] = AnimalRiding.GetRidingAnimal()
    Core["Animal-Ragdoll"] = Animal.Ragdoll

end
function NoJumpCooldown(State)
    for i,v in next, getprotos(PlayerCharacter.OnCharacterAdded) do
        if table.find(getconstants(v), "Jumping")  then
            if Settings.NoJumpCooldown ~= true then
                v = Core["OnCharacterAdded-JumpCooldown"]
            else
                function JumpFunction()
                    PlayerCharacter:LowerStamina(20)
                    return 0
                end
                setconstant(v, 4, JumpFunction)
            end
        end
    end
end

function NoRecoil()
    for i, v in pairs(getgc(true)) do
        if type(v) == "table" and rawget(v, "BaseRecoil") then
            v.BaseRecoil = Settings.NoRecoil == false and Core["Weapons"][i].BaseRecoil or 0
        end
    end
end

function NoSpread()
    for i, v in pairs(getgc(true)) do
        if type(v) == "table" and rawget(v, "BaseRecoil") then
            v.FanAccuracy = Settings.NoSpread == false and Core["Weapons"][i].FanAccuracy or 1
            v.ProjectileAccuracy = Settings.NoSpread == false and Core["Weapons"][i].ProjectileAccuracy or 1
        end
    end
end

function Wallbang()
    for i, v in pairs(getgc(true)) do
        if type(v) == "table" and rawget(v, "BaseRecoil") then
            v.ProjectilePenetration = Settings.Wallbang == false and Core["Weapons"][i].ProjectilePenetration or 20
        end
    end
end

function InstantReload()
    for i, v in pairs(getgc(true)) do
        if type(v) == "table" and rawget(v, "BaseRecoil") then
            v.ReloadSpeed = Settings.InstantReload == false and Core["Weapons"][i].ReloadSpeed or 1000
            v.LoadSpeed = Settings.InstantReload == false and Core["Weapons"][i].LoadSpeed or 1000
            v.LoadEndSpeed = Settings.InstantReload == false and Core["Weapons"][i].LoadEndSpeed or 1000
        end
    end
end

Core["Animal-Mount"] = hookfunction(Animal.Mount, function(...)
    if Settings.InfiniteBoosts then
        Core["Animal-Mount"](...)
        wait()

        local RidingAnimal = AnimalRiding.GetRidingAnimal()
        RidingAnimal.MaxBoosts = math.huge
        RidingAnimal.Boosts = math.huge

        return;
    end
    return Core["Animal-Mount"](...)
end)

Core["Rain-Enable"] = hookfunction(Rain.Enable, function()
    if Settings.NoRain then
        return;
    end
    return Core["Rain-Enable"]()
end)

Core["LowerStamina"] = hookfunction(PlayerCharacter.LowerStamina, function(...)
    if Settings.InfiniteStamina then
        return;
    end
    return Core["LowerStamina"](...)
end)

Core["Ragdoll"] = hookfunction(PlayerCharacter.Ragdoll, function(...)
    if Settings.AntiRagdoll then
        return;
    end
    return Core["Ragdoll"](...)
end)

Core["EnterRagdoll"] = hookfunction(Ragdolls.EnterRagdoll, function(...)
    if Settings.AutoGetUp then
        coroutine.resume(coroutine.create(function()
            local Start = tick()
            repeat
                wait(0)
            until PlayerCharacter:CanGetUp() or Start - tick() > 2
            if PlayerCharacter.IsRagdolledSelf then
                PlayerCharacter:GetUp()
            end
        end))
    end
    if Settings.InstantBreakFree then
        coroutine.resume(coroutine.create(function()
            local Start = tick()
            repeat
                wait(0)
            until PlayerCharacter:CanBreakFree() or Start - tick() > 4
            PlayerCharacter.BreakFreePerc = 5
        end))
    end
    return Core["EnterRagdoll"](...)
end)

Animal.Ragdoll = function(...)
    if Settings.AntiAnimalRagdoll then
        return;
    end
    return Core["Animal-Ragdoll"](...)
end

PlayerCharacter.StopRoll = function(Table, ...)
    if Settings.NoRollCooldown then
        Table.RollDirection = nil
        Table.RollDebounce = false
    end
    return Core["StopRoll"](Table, ...)
end

PlayerCharacter.CanRoll = function(...)
    if Settings.NoRollCooldown then
        return true;
    end
    return Core["CanRoll"](...)
end

Network.FireServer = function(Network, Name, ...)
    local Arguments = {...}
    if Name == "DamageSelf" and Settings.NoFallDamage then
        return;
    end
    return Core["FireServer"](Network, Name, unpack(Arguments))
end

function esp(p)
    
    if shared.toggle == true then
        local char = p.Character
        if char then
          text = char.Name
          item = char.Head
          local BillboardGui = Instance.new("BillboardGui")
      local TextLabel = Instance.new("TextLabel")
      BillboardGui.Parent = item
      BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
      BillboardGui.Active = true
      BillboardGui.AlwaysOnTop = true
      BillboardGui.LightInfluence = 1
      BillboardGui.Size = UDim2.new(0, 100, 0, 50)
      BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)
      TextLabel.Parent = BillboardGui
      TextLabel.BackgroundColor3 = Color3.new(1, 1, 1)
      TextLabel.BackgroundTransparency = 1
      TextLabel.Size = UDim2.new(0, 100, 0, 50)
      TextLabel.Font = Enum.Font.SourceSans
      TextLabel.Text = text
      TextLabel.TextColor3 = p.TeamColor.Color
      TextLabel.TextScaled = false
      TextLabel.TextSize = 20
      TextLabel.TextWrapped = false
      end
  end end 
    spawn(function()
    while wait() do
    local function getPlayerFromCharacter(character)
        for _, player in pairs(game:GetService("Players"):GetPlayers()) do
            if player.Character == character then
                return player
            end
        end
    end end end)
    
local Lib = loadstring(game:HttpGet('https://pastebin.com/raw/GaRF4FDA'))()
local CategoryVariableHere= Lib:Category("The Wild West")
CategoryVariableHere:Button("Walk Faster",function()
while wait() do
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 27
end 
end)
CategoryVariableHere:Toggle("Esp Players",function(State)
shared.toggle = State
        if shared.toggle == true then
            for i,v in pairs(game.Players:GetPlayers()) do
        esp(v)
            end
        end
        
    if shared.toggle == false then
    for i,v in pairs(game:GetService("Workspace")["WORKSPACE_Entities"].Players:GetDescendants()) do
        if v.Name == "BillboardGui" then
          v:Destroy()  
        end
    end
    end
    
    game.Players.PlayerAdded:Connect(function(player)
    if shared.toggle == true then
    esp(player)
    end
    end)
    
    for i,v in pairs(game.Players:GetPlayers()) do
    v.CharacterAdded:Connect(function(player)
        if shared.toggle == true then
    esp(getPlayerFromCharacter(player))
    end
    end)
    end
end) 
   CategoryVariableHere:Button("Animal HitBoxextender",function() while wait(5) do
       for i, v in pairs(game.Workspace.WORKSPACE_Entities.Animals:GetChildren()) do
if v.Name == "Bison" or v.Name == "Deer" or v.Name == "Bear" or v.Name == "Gator" then
v.Body.Size = Vector3.new(30,30,30)
v.Body.Transparency = 0.5
end
end end end)

CategoryVariableHere:Button("Full Bright",function()
local Light = game:GetService("Lighting")

function dofullbright()
Light.Ambient = Color3.new(1, 1, 1)
Light.ColorShift_Bottom = Color3.new(1, 1, 1)
Light.ColorShift_Top = Color3.new(1, 1, 1)
end

dofullbright()

Light.LightingChanged:Connect(dofullbright) end)
CategoryVariableHere:Toggle("SilentAim",function(State)
SilentAim = State
end)

CategoryVariableHere:Toggle("Team Check SilentAim",function(State)
teamcheck = state
	end)
	
CategoryVariableHere:Toggle("horsey InfiniteBoosts",function(State)
Settings.InfiniteBoosts = State
end)
CategoryVariableHere:Toggle("horsey AntiRagdoll",function(State)
Settings.AntiAnimalRagdoll = State
end)
CategoryVariableHere:Toggle("AntiRagdoll",function(State)
Settings.AntiRagdoll = State
end)
CategoryVariableHere:Toggle("InfiniteStamina",function(State)
Settings.InfiniteStamina = State
end)
CategoryVariableHere:Toggle("NoJumpCooldown",function(State)
    Settings.NoJumpCooldown = State
NoJumpCooldown(State) 
end)
CategoryVariableHere:Toggle("NoFallDamage",function(State)
Settings.NoFallDamage = State
end)
CategoryVariableHere:Toggle("Instant Respawn",function(State)
instRespawn = State
end)

CategoryVariableHere:Toggle("AutoGetUp",function(State)
Settings.AutoGetUp = State
end)
CategoryVariableHere:Toggle("InstantBreakFree",function(State)
Settings.InstantBreakFree = State
end)
CategoryVariableHere:Button("NoRecoil",function()
    Settings.NoRecoil = State
    NoRecoil()
end)
CategoryVariableHere:Button("NoSpread",function()
    Settings.NoSpread =  State
    NoSpread()
end)
CategoryVariableHere:Button("Wallbang",function()
    Settings.Wallbang = State
    Wallbang()
end)
CategoryVariableHere:Button("InstantReload",function()
    Settings.InstantReload = State
    InstantReload()
end)

CategoryVariableHere:Button("NoRain",function()
    Settings.NoRain = State
    Rain:Disable()
end)

CategoryVariableHere:Button("Lag Switch F3",function()
local a = false
local b = settings()

game:service'UserInputService'.InputEnded:connect(function(i)
if i.KeyCode == Enum.KeyCode.F3 then
a = not a
b.Network.IncomingReplicationLag = a and 10 or 0
end
end) end) 
CategoryVariableHere:Button("ServerHop",function()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
Teleport()
end)

CategoryVariableHere:Button("Rejoin",function()
    local ts = game:GetService("TeleportService")
local p = game:GetService("Players").LocalPlayer
ts:Teleport(game.PlaceId, p) end)
local CategoryVariableHere= Lib:Category("Credits and info")
CategoryVariableHere:Label("Credits to a r q for ui liba")
CategoryVariableHere:Label("Credits to DekuDimz#7960 aka me lol")
Lib:Reload()
